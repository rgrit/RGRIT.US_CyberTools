{
  "Ansible/Purple_Team_Lab_Infra_As_Code/deploy_vms.yml": "Creates VMs on Proxmox with specified resources and ISOs.",
  "Ansible/Purple_Team_Lab_Infra_As_Code/download-proxmox-isos.yml": "Downloads specified ISOs to Proxmox ISO storage.",
  "Ansible/Purple_Team_Lab_Infra_As_Code/hosts.yml": "Defines Ansible host config for Proxmox server, specifying connection and API details.",
  "Ansible/Purple_Team_Lab_Infra_As_Code/proxmox-initial-setup.yml": "\"Sets up Proxmox server, removes enterprise repos, enables non-enterprise repo, installs packages, and configures NIC passthrough.\"",
  "Blue_Team_Scripts/Email/email_generate_sigma.py": "Extracts IoCs from email reports & generates Sigma rules.",
  "Blue_Team_Scripts/Email/email_grab_attachments.py": "Extracts email attachments from Thunderbird IMAP storage, saving them locally and generating a Markdown report with metadata.",
  "Blue_Team_Scripts/Email/email_list_senders.py": "Extracts email sender addresses from Thunderbird IMAP mailboxes.",
  "Blue_Team_Scripts/Email/email_overview.py": "Analyzes Thunderbird emails for immediate action requirements using LLMs.",
  "Blue_Team_Scripts/Email/email_security_report.py": "Analyzes email metadata for security threats using Ollama Python module.",
  "Blue_Team_Scripts/Secure_Code_Review/scan_for_credentials.py": "Analyzes Python files for security vulnerabilities using Ollama LLM.",
  "Blue_Team_Scripts/file_integrity_monitoring/file_integrity_monitor.py": "The provided code is for a graphical user interface (GUI) application that allows users to create and manage file system baselines, as we...",
  "Custom_Sigma_Rules/correlation_lnx_syslog_flipper_badusb_repeated_enumeration.yml": "Detects potential BadUSB attacks using Flipper Zero via repeated USB insertion events.",
  "Custom_Sigma_Rules/lnx_syslog_flipper_badusb_identifiers.yml": "Detects Flipper Zero BadUSB devices via unusual USB identifiers.",
  "Custom_Sigma_Rules/lnx_syslog_flipper_badusb_inconsistent_branding.yml": "Detects Flipper Zero BadUSB devices with inconsistent branding.",
  "Ducky_Scripts/convert_to_ducky.py": "Encodes Ducky Scripts (.txt) to binary payloads (.bin) using java-based duckencoder.",
  "Elastic/check_cluster_healthy.py": "Connects to Elasticsearch cluster, checks health and prints result or error.",
  "Malware_Analysis/virusTotalAPI/virus_total_scan.py": "VirusTotal API scanner for IOCs, loading keys & querying VT database.",
  "Network_Security/network_monitoring/sniffer.py": "**Extended Packet Sniffer GUI Application**\n\nThis is a graphical user interface (GUI) application for an extended packet sniffer. The app...",
  "Network_Security/wireless_security/WiFi_Discover/wifi_packet_sniff.py": "**WiFi Packet Sniffing and Analysis Script**\n=============================================\n\nThis script is designed to capture and analyz...",
  "Network_Security/wireless_security/WiFi_Discover/wifi_signal_discovery.py": "Scans nearby WiFi, plots signal strengths, and generates a report.",
  "Network_Security/wireless_security/Wifi_Attack/wifi_deauth.py": "WiFi deauthentication attack script sending spoofed packets.",
  "Network_Security/wireless_security/Wifi_Attack/wifi_jam.py": "WiFi beacon flooding attack script. Sends fake beacons with random SSIDs/BSSIDs.",
  "OSINT_Scripts/CTI_and_Detection/rss_feed_mgmt_csv_to_OPML.py": "Converts CSV to OPML, mapping blog names and RSS links.",
  "OSINT_Scripts/CTI_and_Detection/rss_feed_to_detection/analysis/text_analysis.py": "Summarizes articles with cyber threat intelligence and detection engineering insights.",
  "OSINT_Scripts/CTI_and_Detection/rss_feed_to_detection/analysis/threat_analysis.py": "The provided code appears to be a collection of functions related to cybersecurity threat detection and analysis. Here is a high-level de...",
  "OSINT_Scripts/CTI_and_Detection/rss_feed_to_detection/config.py": "Config file for RSS and API settings, with time handling and file paths.",
  "OSINT_Scripts/CTI_and_Detection/rss_feed_to_detection/heatmap_generator.py": "Extracts MITRE codes from markdown files and generates a heatmap JSON file.",
  "OSINT_Scripts/CTI_and_Detection/rss_feed_to_detection/main.py": "Fetches RSS feed, analyzes articles for threats, extracts IoCs, and generates reports.",
  "OSINT_Scripts/CTI_and_Detection/rss_feed_to_detection/reporting/report_generator.py": "**Threat Intelligence Report Generator**\n======================================\n\nThis script generates a Markdown report for a single thr...",
  "OSINT_Scripts/CTI_and_Detection/rss_feed_to_detection/utils/api_utils.py": "Queries LLaMA API with retries, handling timeouts and exceptions.",
  "OSINT_Scripts/CTI_and_Detection/rss_feed_to_detection/utils/file_utils.py": "Loads/saves article IDs from/to a JSON file.",
  "OSINT_Scripts/CTI_and_Detection/rss_feed_to_detection/utils/rss_utils.py": "Fetches and parses an RSS feed from a given URL, handling exceptions.",
  "Flipper_Zero/flipper_rf_lock.py": "**RF signal scanner using Flipper device**",
  "Flipper_Zero/rf_auto_scan_decode.py": "**RF frequency scanner using Flipper device**",
  "Flipper_Zero/flipper_log_rf.py": "**Flipper Zero serial listener script**",
  "Flipper_Zero/flipper_rf_scan_log.py": "**RF signal scanner using Flipper Zero device**",
  "wigle_wifi_android/plot_groups_of_devices.py": "**Bluetooth Device Clustering Script**",
  "wigle_wifi_android/frequency_plot.py": "**Wi-Fi network analyzer script**",
  "wigle_wifi_android/11_meter_grouping.py": "**WiFi SSID analysis script**",
  "wigle_wifi_android/signal_strength_heatmap.py": "**Wi-Fi RSSI heatmap generator**",
  "wigle_wifi_android/new_thing.py": "**Wi-Fi network visualizer with distance calculations.**",
  "wigle_wifi_android/weak_auth.py": "**Identifies & reports WiFi networks using weak authentication (open/WEP).**",
  "wigle_wifi_android/authmode_wildcard_drilldown.py": "**Generates a deep dive report from CSV data based on wildcard AuthMode search.**",
  "wigle_wifi_android/data_pre-processing.py": "**Loads Wigle Wi-Fi network CSV data into a pandas DataFrame.**",
  "wigle_wifi_android/geospatial_mapping.py": "Creates interactive Wi-Fi network maps with filters from Wigle CSV data.",
  "RTL-SDRv4/discover_stuff.py": "**RTL-SDR script to scan and capture 2.4GHz signals**",
  "RTL-SDRv4/detect_analyze_broad_spectrum.py": "**Plots raw and smoothed signal amplitudes from a CSV file.**",
  "kismet/alert_to_slack.py": "Fetches Kismet alerts, sends new ones to Slack, & avoids duplicates. Polls every 60 seconds. Requires Kismet URL, API key, & Slack webhook.",
  "Network_Security/network_monitoring/flow_analyzer.py": "Network flow analyzer GUI using Scapy & Tkinter. Captures & displays packets, identifies unencrypted flows & potential credentials. Includes",
  "Incident_Response/possible_rootkit_investigation.py": "Linux incident response script. Investigates a PID for rootkit/malware signs via system calls, network checks, & rootkit scanners. Outputs f"
}